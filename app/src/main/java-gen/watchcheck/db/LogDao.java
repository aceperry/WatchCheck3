package watchcheck.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import watchcheck.db.Log;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LOG.
*/
public class LogDao extends AbstractDao<Log, Long> {

    public static final String TABLENAME = "LOG";

    /**
     * Properties of entity Log.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property WatchId = new Property(1, long.class, "watchId", false, "WATCH_ID");
        public final static Property Period = new Property(2, int.class, "period", false, "PERIOD");
        public final static Property ReferenceTime = new Property(3, java.util.Date.class, "referenceTime", false, "REFERENCE_TIME");
        public final static Property WatchTime = new Property(4, java.util.Date.class, "watchTime", false, "WATCH_TIME");
        public final static Property Position = new Property(5, String.class, "position", false, "POSITION");
        public final static Property Temperature = new Property(6, Integer.class, "temperature", false, "TEMPERATURE");
        public final static Property Comment = new Property(7, String.class, "comment", false, "COMMENT");
    };

    private Query<Log> watch_LogsQuery;

    public LogDao(DaoConfig config) {
        super(config);
    }
    
    public LogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOG' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'WATCH_ID' INTEGER NOT NULL ," + // 1: watchId
                "'PERIOD' INTEGER NOT NULL ," + // 2: period
                "'REFERENCE_TIME' INTEGER NOT NULL ," + // 3: referenceTime
                "'WATCH_TIME' INTEGER NOT NULL ," + // 4: watchTime
                "'POSITION' TEXT," + // 5: position
                "'TEMPERATURE' INTEGER," + // 6: temperature
                "'COMMENT' TEXT);"); // 7: comment
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Log entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getWatchId());
        stmt.bindLong(3, entity.getPeriod());
        stmt.bindLong(4, entity.getReferenceTime().getTime());
        stmt.bindLong(5, entity.getWatchTime().getTime());
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(6, position);
        }
 
        Integer temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindLong(7, temperature);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(8, comment);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Log readEntity(Cursor cursor, int offset) {
        Log entity = new Log( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // watchId
            cursor.getInt(offset + 2), // period
            new java.util.Date(cursor.getLong(offset + 3)), // referenceTime
            new java.util.Date(cursor.getLong(offset + 4)), // watchTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // position
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // temperature
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // comment
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Log entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWatchId(cursor.getLong(offset + 1));
        entity.setPeriod(cursor.getInt(offset + 2));
        entity.setReferenceTime(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setWatchTime(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setPosition(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTemperature(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setComment(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Log entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Log entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "logs" to-many relationship of Watch. */
    public List<Log> _queryWatch_Logs(long watchId) {
        synchronized (this) {
            if (watch_LogsQuery == null) {
                QueryBuilder<Log> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.WatchId.eq(null));
                queryBuilder.orderRaw("REFERENCE_TIME ASC");
                watch_LogsQuery = queryBuilder.build();
            }
        }
        Query<Log> query = watch_LogsQuery.forCurrentThread();
        query.setParameter(0, watchId);
        return query.list();
    }

}
